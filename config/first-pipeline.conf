input {
    beats {
        port => "5044"
        codec => "json"
    }
}
filter {
#    grok {
#        match => { "message" => "%{COMBINEDAPACHELOG}"}
#    }
#    geoip {
#        source => "clientip"
#    }


    if [service.name] == "mission_start" { 
        clone {
            clones => ["copied_mission_started"]
#            add_field => { "pano_sent_aisle_list" => "A1"}
#            add_field => { "pano_sent_aisle_list" => "A2"}
            remove_field => ["timestamp"]
            add_tag => ["mission_level_aisle_coverage_index"]
        }
    } else if [http_request_remote_url_endpoint] == "/notification" {

        clone {
            clones => ["copied_notification"]
            add_tag => ["mission_level_aisle_coverage_index"]
        }        
       
        if [type] == "copied_notification" {
            #need to keep the timstamp, as the time format %{} depends on the timestamp
            prune {
                whitelist_names => ["^mission_id$","^aisle_id$","timestamp"]
            }
           
            elasticsearch {
                hosts => [ "http://172.16.96.16:9200", "http://10.11.3.31:9200" ]
                #index => "robot_daily_run-%{+YYYY.MM.dd}"
                index => "mission_level_aisle_coverage_index-%{+YYYY.MM.dd}"
                query => "mission_id:(%{mission_id})"
                sort => "mission_start_time"
                fields => { 
                  "mission_start_time" => "mission_start_time"
                  "run_type" => "run_type"
                  "store_id" => "store_id"
                  "robot_id" => "robot_id"
                  "number_of_planned_aisles" => "number_of_planned_aisles"
                  "planned_aisles" => "planned_aisles"
                  "pano_sent_aisle_list" => "pano_sent_aisle_list"
                }
                add_tag => ["mission_level_aisle_coverage_index"]
                add_field => { "pano_sent_aisle_list" => "%{aisle_id}"}
                remove_field => ["aisle_id"]
            } 


            #remove the dups
            ruby {
                code => 'event.set("pano_sent_aisle_list",event.get("pano_sent_aisle_list").uniq)'
            }
            
        } 
   }
}
output {
    if "mission_level_aisle_coverage_index" in [tags] {
        elasticsearch {
            hosts => [ "http://172.16.96.16:9200", "http://10.11.3.31:9200" ]
            index => "mission_level_aisle_coverage_index-%{+YYYY.MM.dd}"
            document_id => "%{mission_id}"
        }
    }
#    file {
#        path => "/home/robin/logstash.log"
#    }
    stdout { codec => rubydebug }
}
